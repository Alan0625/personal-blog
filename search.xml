<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[白帽子讲Web安全]]></title>
    <url>%2F2019%2F06%2F09%2F%E7%99%BD%E5%B8%BD%E5%AD%90%E8%AE%B2Web%E5%AE%89%E5%85%A8%2F</url>
    <content type="text"><![CDATA[白帽子讲Web安全 一、世界观安全 安全的基础是信任。 安全的三要素：CIA 机密性(Confidentiality) 完整性(Integrity) 可用性(Availability) 机密性 加密数据 完整性 数字签名 可用性随需而得（DOS,拒绝服务攻击）其他：可审计性 、不可抵赖性 互联网安全的核心问题，是数据安全的问题。 一个优秀的安全方案应该具备以下特点： 能够有效解决问题 用户体验好 高性能 低耦合 易于扩展与升级 白帽子兵法 白名单、黑名单 最小权限原则 纵深防御原则 数据与代码分离原则 不可预测性原则（不可预测性能有效地对坑基于篡改、伪造的攻击。一般要用到加密算法，随机数算法，哈希算法） 第二篇、客户端脚本安全 二、 浏览器安全 同源策略(基础) 浏览器的同源策略， 限定了来自不同源的”document” 或脚本，对当前”document”读取或设置某些属性。 浏览器沙箱 限制不可信的代码访问隔离区之外的资源。 恶意网址拦截 基于黑名单 SSL 高速发展的浏览器安全 三、跨站脚本攻击(XSS)(Cross Site Script) 1. XSS攻击 通常指黑客通过“HTML注入”篡改了网页，插入了恶意的脚本，从而在用户浏览网页时，控制用户浏览器的一种攻击。 XSS攻击的类型 反射型XSS 存储型XSS DOM Based XSS XSS的防御 HttpOnly 输入检查（放在服务器端代码实现， 一般是在客户端和服务器端同时做相同的输入检查） 输出检查 正确地防御XSS 处理富文本（输入检查，标签使用白名单） 防御DOM BASED XSS 四、跨站点请求伪造（CSRF)(Cross Site Request Forgery) 1. 攻击者诱使用户访问一个页面，就以该用户身份在第三方站点里执行了一次操作，CSRF攻击的过程，往往是用户不知情的情况下构造了网络请求。 2. 浏览器的Cookie策略 3. CSRF的防御 - 验证码 - Refer Check - Token（需要使用安全的随机数生成器生成Token,要注意Token的保密性和随机性) CSRF的本质原因是重要操作的所有参数都是可以被攻击者猜测到的。 五、点击劫持 1. 攻击者使用一个透明的、不可见的iframe,覆盖在一个网页上，然后诱使用户在该网页上操作，在用户不知情的情况下，点击透明的iframe页面。 2. 劫持的几种方式 - Flash点击劫持 - 图片覆盖攻击 - 拖拽劫持与数据窃取 - 触屏劫持 3. 防御劫持 - 禁止跨域的iframe - X-Frame-Options 六、 HTML5安全 1. Html5新标签的XSS 2. iframe的sandbox 3. 跨域访问的方法（jsonp、iframe) 4. 跨域访问的限制(Access-Control-Allow-Origin) 第三篇 服务器端应用安全 第七章、注入攻击 1. SQL注入 2. 盲目注入 3. 数据库攻击技巧 4. 正确地防御SQL注入（找到所有的SQL注入漏洞，修补这些漏洞） - 防御SQL注入的最佳方式，就是使用预编译语句，绑定变量。 - 使用安全的存储过程对抗SQL注入。 - 检测数据类型。 - 使用安全函数。 5. 其他注入攻击 - XML注入 - 代码注入 第8章、文件上传漏洞 1. 文件上传漏洞是指用户上传了一个可执行的脚本文件，并通过此脚本文件获得了执行服务器端命令的能力。 2. 设计安全的文件上传功能 1. 文件上传的目录设置为不可执行 2. 判断文件类型 3. 使用随机数改写文件名和文件路径 4. 单独设置文件服务器的域名 第九章、认证与会话管理 1. 认证的目的是为了认出用户是谁，而授权的目的是为了决定用户能够做什么。 2. 密码必须以不可逆的加密算法，或者是单向散列函数算法，加密后存储在数据库中。 3. MD5(彩虹表， 加盐) 4. 多因素认证（动态口令、数字证书、宝令、支付盾） 5. Session与认证 - Session劫持 6. 单点登录（SSO, Single Sign On) - OpenID 第十章、 访问控制 1. 垂直权限管理 在配置权限时，应当使用“最小权限原则”，并使用“默认拒绝”的策略，只对有需要的主体单元单独配置“允许”的策略。这在很多时候能够避免发生“越权访问”。 2. 水平权限管理 越权访问，用户A访问了用户B的资源 基于数据的访问控制”用户组“的概念，用户组内的成员才能实现对某些数据的操作。 3. OAuth OAuth是一个在不提供用户名和密码的情况下，授权第三方应用访问Web资源的安全协议.OpenID解决的是认证问题，OAuth则更注重授权。 常见的应用OAuth的场景，一般是某个网站想要获取一个用户在第三方网站钟的某些资源或服务。 第十一章、加密算法与随机数 1. 加密算法 分组加密算法： DES AES 流密码加密算法： RC4 ORYX SEAL 2. 密钥管理 密码系统的安全性应该依赖于密码的复杂性。 密码管理中最常见的错误，就是将密钥硬编码在代码里。 对于Web应用来说，常见的做法是将密钥（包括密码）保存在配置文件或数据库中，在使用时由程序读出密钥并加载进内存。 3、伪随机数 不要把时间函数当成伪随机数使用。 加密算法的使用和选择上，有以下最佳实践 1. 不要使用ECB模式； 2. 不要使用流密码（例如RC4) 3. 使用HMAC-SHA1代替MD5(甚至是代替SHA1) 4. 不要使用相同的key做不同的事情； 5. salts与IV需要随机产生； 6. 不要自己实现加密算法，尽量使用安全专家已经实现好的库； 7. 不要依赖系统的保密性。 常见加密方式选择： - 使用CBC模式的AES256用于加密； - 使用HMAC-SHA512用于完整性检查； - 使用带Salt的SHA-256或SHA-512用于 Hashing. 第十二章、 Web框架安全 1. MVC 框架安全 2. Web框架与CSRF防御 3. HTTP Headers管理 4. Web框架自身问题 第十三章、 应用层拒绝服务攻击 1、DDOS(分布式拒绝服务， Distributed Denial of Service) 2、应用层DDOS 3. 限制请求频率 4. 解决办法 - 应用代码要做好性能优化 - 网络架构上做好优化 - 实现一些对抗手段，例如限制每个IP地址的请求频率。 5. 验证码 6. 防御应用层DDOS 第十四章、 PHP安全 第十五章、 Web Server配置安全 1. Apache安全 Apache已root身份或者admin身份运行是一个非常糟糕的决定。 应该使用专门的用户身份运行Apache,这个用户身份不应该具备Shell,它唯一的作用就是用来运行Web应用。 2. Nginx安全 Nginx与Apache最大的区别在于，检查Apach安全时更多的要关注Module的安全，而Nginx则需要注意软件本身的安全，及时升级软件版本。 3. jBoss远程命令执行 4. Tomcat 远程命令执行 5. 注意事情 在搭建服务器端环境时， 需要注意最小权限原则，应该以独立的低权限身份运行Web进程，同时Web Server的一些参数能够优化性能，有助于缓解DDOS攻击，在实际运用时可以酌情使用。 第四篇 互联网公司安全运营 第十六章 互联网业务安全 1. 一个项目的影响因素的优先级 - 功能是否按原定设计实现； - 性能 - 可用性 - 是否按原定计划上线 - 可维护性 - 安全 2. 业务逻辑安全 3. 钓鱼网站 4. 用户隐私保护 第十七章、安全开发流程 1. 开发规范 2、安全测试 Web安全扫描器（w3af, skipfish 第十八章、 安全运营 1、 安全 —— 三分技术、七分管理 2. 把安全运营起来 3. 漏洞修补流程 4. 安全监控 5. 入侵检测 6. 紧急响应流程 - 邮件报警 - IM报警 - 短信报警]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>Web安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTTP图解学习]]></title>
    <url>%2F2019%2F06%2F09%2FHTTP%E5%9B%BE%E8%A7%A3%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[第一章 了解Web及网路基础1.1 使用HTTP协议访问Web 像这种通过发送请求获取服务器资源的web浏览器等，都可称为客户端。 HTTP (HyperText Transfer Protocol) 超文本传输协议 WWW的3项构建技术: HTML(HyperText Markup Language) 超文本标记语言 HTTP(HyperText Transfer Protocol) 超文本传输协议 URL(Uniform Resource Locator) 统一资源定位符 1.2 HTTP的诞生 1996/5 HTTP/1.0 RFC1945 1997/1 HTTP/1.1 RFC2068 -&gt; RFC2616， 目前主流的HTTP协议版本 2013/8 HTTP/2.0 正在制定中 1.3 网络基础TCP/IP 像这种把与互联网相关联的协议集合起来总称为TCP/IP. TCP/IP 分为四层： 应用层： 决定了向用户提供应用服务时通信的活动。（FTP(File Transfer Protocol，文件传输协议 )、 HTTP(HyperText Transfer Protocol) 、DNS(Domain Name System，域名系统)) 传输层： 对上层应用层，提供处于网络连接中的两台计算机之间的数据传输。(TCP(Transmission Control Protocol, 传输控制协议)， UDP(User Data Protocol, 用户数据报协议)) 网络层： 处理在网络上流动的数据包。数据包是网络传输的最小的数据单位。(IP（Internet Protocol）, 网际协议) 数据链路层： 用来处理连接网络的硬件部分。包括操作系统，硬件的设备驱动，网卡，及光纤等。硬件上的范畴均在数据链路层的作用范围之内。 TCP/IP 通信传输流 利用TCP/IP协议族进行通信时，会通过分层顺序与对方进行通信，客户端从应用层往下走，服务端往应用层往上走。 1.4 与HTTP关系密切的协议： IP 、TCP 、DNS IP（Internet Protocol）, 网际协议,位于网络层， 作用是把各种数据包传送给对方。保证数据准确传送到对方那里，需要确定IP地址和MAC地址IP地址(节点被分配到的地址，可变换)、 MAC地址(网卡所属的固定的地址，基本上不会更改)。 ARP协议(Address Resolution Protocol)是一种用以解析地址的协议，根据通信方的IP地址就可以反查出对应的MAC地址。 TCP 提供可靠的字节流服务。TCP位于传输层TCP协议采用了三次握手策略，确保数据能到达目标。 握手的过程中使用了TCP的标志——SYN(synchronize)和ACK(acknowledgement). 三次握手的过程： 客户端首先发送一个带SYN标志的数据包给服务端； 服务端收到后，回传一个带有SYN/ACK标志的数据包来表示已经成功收到数据信息； 最后，客户端再会传一个带ACK标志的数据包，代表握手结束。 DNS（Domain Name System）域名解析系统，位于应用层提供域名到IP地址之间的解析服务。DNS协议提供通过域名查找IP地址，或逆向从IP地址反查域名的服务。 URI (Uniform Resource Identifier,统一资源标识符) URI用字符串标识某一互联网资源。 URL (Uniform Resource Locator，统一资源定位符) 第二章 简单的HTTP协议2.1 HTTP协议用于客户端和服务器端之间的通信 请求访问文本或图像等资源的一端称为客户端，而提供资源响应的一端称为服务器端。 HTTP协议规定，请求从客户端发出，最后服务器端响应该请求并返回。 请求报文是由请求方法、请求URI、协议版本、可选的请求首部字段和内容实体构成。 响应报文基本上是由协议版本、状态码、用以解释状态码的原因短语、可选的响应首部字段以及实体主体构成。 HTTP是不保存状态的协议，自身不对请求和响应之间的通信状态进行保存。目的是为了更快地处理大量的事务，确保协议的可伸缩性。使用Cookie技术管理状态。 HTTP方法 1、GET 获取资源，用来请求访问已被URI识别的资源。 2、POST 传输实体主体 3、PUT 传输文件，自身不带验证机制，安全性存在问题 4、HEAD 获得报文首部，只是不返回报文主体部分。用于确认URI的有效性及资源更新的日期时间等。 5、DELETE 删除文件， 自身不带验证机制，安全性存在问题 6、OPTIONS 用来查询针对请求URI指定的资源支持的方法。 7、TRACE 追踪路径，让Web服务器将之前的请求通信环回给客户端的方法。容易受到XSS攻击 8、CONNECT 用隧道协议连接代理 要求在与代理服务器通信时建立隧道，实现用隧道协议进行TCP通信。主要使用SSL(Secure Socket Layer, 安全套接层)和TLS(Transport Layer Security, 传输层安全)协议把安全内容加密后经网络隧道传输。 持久连接HTTP keep-alive 只要任意一端没有明确提出断开连接，则保持TCP连接状态。 持久连接的好处在于减少了TCP连接的重复建立和断开所造成的额外开销，减轻了服务器端的负载。同时提高Web页面的显示速度。 HTTP/1.1中，所有的连接默认都是持久连接，在HTTP/1.0中并未标准化 管线化持久连接使得多数请求以管线化方式发送成为可能。可以同时并行发送多个请求 使用Cookie的状态管理Cookie通过在请求和响应报文中写入Cookie信息来控制客户端的转态。 Cookie会根据从服务器端发送的响应报文内的一个叫做Set-Cookie的首部字段信息，通知客户端保存Cookie。当下次客户端再往该服务器发送请求时，客户端会自动在请求报文中加入Cookie值后发送出去。 服务器端发现客户端发送过来的Cookie后，会去检查究竟是去哪一个客户端发来的连接请求，然后对比服务器上的记录，最后得到之前的状态信息。 第三章 HTTP报文内的HTTP信息3.1 HTTP报文 用于HTTP协议交互的信息被称为HTTP报文。 客户端的HTTP报文叫做请求报文，服务端的叫做响应报文。 HTTP报文本身是由多行（用CR+LF作换行符）数据构成的字符串文本 HTTP报文大致可分为报文首部和报文主体两块。两者由最初出现的空行(CR+LF)来划分。 CR : 回车符，16进制 0x0d LF: 换行符，16进制 0x0a 报文首部： 服务器端或客户端需要处理的请求或响应的内容及属性 报文主体： 应被发送的数据 请求报文/响应报文 报文首部 + 空行 + 报文主体 请求报文： 请求行 + 请求首部字段 + 通用首部字段 + 实体首部字段 + 其他 响应报文： 状态行 + 响应首部字段 + 通用首部字段 + 实体首部字段 + 其他 3.2 编码提升传输速率 报文 是HTTP通信中的基本单位，由8位组字节流组成，通过HTTP通信传输。 实体 作为请求或响应的有效载荷数据被传输，其内容由实体首部和实体主体组成。 HTTP报文的主体用于传输请求或响应的实体主体。 HTTP中常用的内容编码有以下几种： gzip(GNU zip) compress (UNIX系统的标准压缩) deflate (zlib) identity (不进行编码) 分块传输编码 3.3 获取部分内容的范围请求 范围请求： Range Request, 执行范围请求时，会用到首部字段Range来指定资源byte范围。 3.4 内容协商返回最合适的内容 内容协商有三种类型 服务器驱动协商 客户端驱动协商 透明协商 第四章 返回结果的HTTP状态码4.1 状态码告知从服务器端返回的请求结果 状态码 200 表示从客户端发来的请求在服务器端被正常处理了 204 表示服务器接收的请求已成功处理，但在返回的响应报文中不含实体的主体部分。 206 表示客户端进行了范围请求，而服务器成功执行了这部分的请求。响应报文中包含由Content-Range指定范围的实体内容。 301 永久性重定向， 表示请求的资源已被分配了新的URI，以后应使用资源现在所指的URI. 302 临时重定向，表示请求的资源已被分配了新的URI,希望用户能使用新的URI访问。 303 表示由于请求对应的资源存在着另一个URI,应使用Get方法定向获取请求的资源。 304 客户端发送附带条件的请求时，服务器允许请求访问资源，但未满足条件的情况。 307 临时重定向，不会从POST变成GET. 400 表示请求报文中存在语法错误。 401 表示发送的请求需要有通过HTTP认证的认证信息。 403 表示请求资源的访问被服务器拒绝了。 404 表示服务器上无法找到请求的资源 500 表示服务器在执行请求时发生了错误 503 表明服务器暂时处于维护状态，无法处理请求。 第五章 与HTTP协作的Web服务器5.1 用单台虚拟主机实现多个域名 HTTP/1.1规范允许一台HTTP服务器搭建多个Web站点 在互联网上，域名通过DNS服务映射到IP地址之后的目标网站。 5.2 代理、网关、隧道 这些应用程序和服务器可以将请求转发给通信线路上的下一站服务器，并且能接收从那台服务器发送的响应在转发给客户端。 代理： 是一种有转发功能的应用程序，接收由客户端发送的请求并转发给服务器，同事也接收服务器返回的响应并转发给客户端。 代理不改变请求URI,会直接发送给前方持有资源的目标服务器。 理由： 利用缓存技术减少网络带宽的流量，组织内部针对特定网站的访问控制，以获取访问日志为主要目的。 缓存代理：代理转发响应时，缓存代理会预先将资源的副本保存在代理服务器上，当代理再次接收到相同的资源请求时，就可以不从源服务器那里获取资源，而将之前缓存的资源作为响应返回。 透明代理：转发请求或响应时，不对报文做任何的加工的代理类型称为透明代理，反之称为非透明代理。 网关： 是转发其他服务器通信数据的服务器。 提高通信的安全性，可以在客户端和网关之间的通信线路上加密以确保连接的安全 隧道： 是在相隔甚远的客户端和服务器两者之间进行中转，并保持双方通信连接的应用程序。 使用SSL等手段进行加密通信，确保客户端能与服务器进行安全的通信。 5.3 保存资源的缓存 缓存是指代理服务器或客户端本地磁盘内保存的资源副本。利用缓存可以减少对服务器的访问，因此也就节省了通信流量和通信时间。 第六章 HTTP首部 HTTP报文首部 HTTP请求报文: 由方法、URI、HTTP版本、HTTP首部字段等部分构成 HTTP响应报文: 由状态码(数字和原因短语)、HTTP版本、HTTP首部字段等部分构成 HTTP 首部字段HTTP首部字段是由首部字段名和字段值构成的，中间用冒号“:”分隔。 HTTP/1.1 通用首部字段 Cache-Control: 操作缓存的工作 Connection: 控制不再转发给代理的首部字段，管理持久连接， keep-alive Date: 表明创建HTTP报文的日期和时间 Transfer-Encoding: 规定了传输保温主体时采用的编码方式 Upgrade: 用于检测HTTP协议及其他协议是否可使用更高的版本进行通信 请求首部字段 Accept Accept-Charset Accept-Encoding Accept-Language Authorization Expect If-Match If-Modified-Since If-None-Match If-Range If-Unmodified-Since Max-Forwards Range Refer User-Agent 响应首部字段 Accept-Ranges Age ETag 实体首部字段 Allow Connect-Encoding Connect-Language Connect-Length Connect-Location Connect-Range Connect-Type Expires Last-Modified 第七章 确保安全的HTTPS7.1 HTTP的缺点 通信使用明文（不加密），内容可能会被窃听 不验证通信方的身份，因此有可能遭遇伪装 无法证明报文的完整性，所以有可能已遭篡改 通信加密 HTTP协议中没有加密机制，但可以通过和SSL(Secure Socket Layer)或TLS(Transfer Layer Security)的组合使用，加密HTTP的通信内容。 与SSL组合使用的HTTP被称为HTTPS(HTTP Secure) 或 HTTP over SSL。SSL不仅提供了加密处理，而且还使用了一种被称为证书的手段，可用于确定通信方。 7.2 HTTPS = HTTP + 加密 + 认证 + 完整性保护 把添加了加密及认证机制的HTTP称为HTTPS。HTTPS是HTTP通信接口部分用SSL和TLS协议代替而已。HTTPS就是身披SSL协议这层外壳的HTTP。 SSL采用公开密钥加密的加密处理方式。 加密和解密同用一个密钥的方式为共享密钥加密，也叫对称密钥加密，不安全。 公开密钥加密采用一对非对称的密钥，一把叫私有密钥，另一把叫公开密钥。 使用公开密钥加密方式，发送密文的一方使用对方的公开密钥进行加密处理，对方收到被加密的信息后，在使用自己的私有密钥进行解密。利用这种方式，不需要发送用来解密的私有密钥，也不必担心密钥被攻击者窃听而盗走。 HTTPS采用共享密钥加密和公开密钥加密两者并用的混合加密机制。公开密钥加密与对称密钥加密相比，其处理速度要慢，公开密钥加密处理起来比对称密钥加密方式更为复杂，效率低。 在交换密钥环节使用公开密钥加密方式，之后建立通信交换报文阶段则使用共享密钥加密方式。 保证公开密钥正确性的证书—-CA(数字证书认证机构) HTTPS的安全通行机制SSL的慢分两种。一种是指通信慢，另一种是指由于大量消耗CPU及内存等资源，导致处理速度慢。 第八章 确认访问用户身份的认证 HTTP使用的认证方式 BASIC认证（基本认证) DIGEST认证（摘要认证） SSL 客户端认证 FormBase认证（基于表单认证) 使用Cookie来管理Session 加盐的方式加密信息 第九章 基于HTTP的功能追加协议 消除HTTP瓶颈的SPDY目的是解决HTTP的性能瓶颈，缩短Web页面的加载时间Ajax 局部刷新Comet 服务端推送SPDY 在应用层与运输层之间通过新加回话层的形式运作。同时，SPDY规定通信中使用SSL。SPDY协议是Google开发的基于TCP的应用层协议，用以最小化网络延迟，提升网络速度，优化用户的网络使用体验。 SPDY的好处 多路复用流 赋予请求优先级 压缩HTTP首部 推送功能 服务器提示功能 使用浏览器进行全双工通信的 WebSocketWebSocket协议的主要特点 推送功能，支持由服务器向客户端推送数据的推送功能 减少通信量 握手请求 （Upgrade) 握手响应 HTTP/2.0 (目标是改善用户在使用Web时的速度体验)提升： HTTP/2.0采用二进制格式而非文本格式 HTTP/2.0是完全多路复用的，而非有序并阻塞的(只需一个连接即可实现并行) 使用报头压缩，HTTP/2.0降低了开销 HTTP/2.0让服务器可以将响应主动“推送”到客户端缓存中 流量控制 第十章 构建Web内容的技术 HTML CSS DOM CGI(Common Gateway Interface, 通用网关接口) Servlet XML RSS(简易信息聚合) JSON 第十一章 Web的攻击技术 SQL注入攻击 OS命令注入攻击 客户端的验证 XSS（跨站脚本攻击）XSS是攻击者利用预先设置的陷阱触发的被动攻击（窃取客户的Cookie的信息） CSRF(跨站点强求伪造) 密码破解 通过网络进行密码试错（穷举法、 字典攻击) 已加密密码的破解(通过穷举法、字典攻击 、 彩虹表 、 拿到密钥、 加密算法漏洞) 点击劫持 DOS攻击 后门程序]]></content>
      <categories>
        <category>HTTP</category>
      </categories>
      <tags>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[D3.js基础]]></title>
    <url>%2F2018%2F08%2F16%2FD3-js%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[D3.js基础用法使用 D3.jsD3.js 是一个 JavaScript 函数库，并不需要通常所说的“安装”。它只有一个文件，在 HTML 中引用即可。有两种方法： （1）下载 D3.js 的文件 d3.zip: https://github.com/mbostock/d3/releases/download/ 解压后，在 HTML 文件中包含相关的 js 文件即可。 （2）还可以直接包含网络的链接，这种方法较简单： 1&lt;script src=&quot;http://d3js.org/d3.v3.min.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt; 但使用的时候要保持网络连接有效，不能再断网的情况下使用。 开发中需要使用的工具记事本软件：Notepad++、Editplus、Sublime Text 等，选择自己喜欢的即可。 浏览器：IE9 以上、Firefox、Chrome等，推荐用 Chrome 服务器软件：Apache、Tomcat 等 其中，服务器软件可能不是必须的，不过 D3 中有些函数需要将 HTML 文件放置于服务器目录下，才能正常使用，关于这点以后会再做说明。 选择集使用 d3.select() 或 d3.selectAll() 选择元素后返回的对象，就是选择集。 另外，有人会发现，D3 能够连续不断地调用函数，形如： d3.select().selectAll().text()。这称为链式语法。 选择元素在 D3 中，用于选择元素的函数有两个： d3.select()：是选择所有指定元素的第一个d3.selectAll()：是选择指定元素的全部这两个函数返回的结果称为选择集。 绑定数据D3 中是通过以下两个函数来绑定数据的： datum()：绑定一个数据到选择集上data()：绑定一个数组到选择集上，数组的各项值分别与选择集的各元素绑定相对而言，data() 比较常用。 在上面的代码中，用到了一个无名函数 function(d, i)。当选择集需要使用被绑定的数据时，常需要这么使用。其包含两个参数，其中： d 代表数据，也就是与某元素绑定的数据。i 代表索引，代表数据的索引号，从 0 开始。 选择、插入、删除元素选择元素涉及的函数有两个:select 、 selectAll 关于 select 和 selectAll 的参数，其实是符合 CSS 选择器的条件的，即用“井号（#）”表示 id，用“点（.）”表示 class。 插入元素涉及的函数有两个： append()：在选择集末尾插入元素insert()：在选择集前面插入元素 删除一个元素时，对于选择的元素，使用 remove 即可. 绘制一个简单的图表HTML 5 提供两种强有力的“画布”：SVG 和 Canvas。 SVGSVG，指可缩放矢量图形（Scalable Vector Graphics），是用于描述二维矢量图形的一种图形格式，是由万维网联盟制定的开放标准。SVG 使用 XML 格式来定义图形，除了 IE8 之前的版本外，绝大部分浏览器都支持 SVG，可将 SVG 文本直接嵌入 HTML 中显示。 SVG 有如下特点： SVG 绘制的是矢量图，因此对图像进行放大不会失真。基于 XML，可以为每个元素添加 JavaScript 事件处理器。每个图形均视为对象，更改对象的属性，图形也会改变。不适合游戏应用。 CanvasCanvas 是通过 JavaScript 来绘制 2D 图形，是 HTML 5 中新增的元素。 Canvas 有如下特点： 绘制的是位图，图像放大后会失真。不支持事件处理器。能够以 .png 或 .jpg 格式保存图像适合游戏应用 绘制矩形1234567var width = 300; //画布的宽度var height = 300; //画布的高度 var svg = d3.select(&quot;body&quot;) //选择文档中的body元素 .append(&quot;svg&quot;) //添加一个svg元素 .attr(&quot;width&quot;, width) //设定宽度 .attr(&quot;height&quot;, height); //设定高度 上面的 rect 里没有矩形的属性。矩形的属性，常用的有四个： x：矩形左上角的 x 坐标y：矩形左上角的 y 坐标width：矩形的宽度height：矩形的高度要注意，在 SVG 中，x 轴的正方向是水平向右，y 轴的正方向是垂直向下的。 12345678910111213svg.selectAll(&quot;rect&quot;) .data(dataset) .enter() .append(&quot;rect&quot;) .attr(&quot;x&quot;,20) .attr(&quot;y&quot;,function(d,i)&#123; return i * rectHeight; &#125;) .attr(&quot;width&quot;,function(d)&#123; return d; &#125;) .attr(&quot;height&quot;,rectHeight-2) .attr(&quot;fill&quot;,&quot;steelblue&quot;); 比例尺将某一区域的值映射到另一区域，其大小关系不变，这就是比例尺（Scale）。 D3 中的比例尺，也有定义域和值域，分别被称为 domain 和 range。开发者需要指定 domain 和 range 的范围，如此即可得到一个计算关系。 线性比例尺线性比例尺，能将一个连续的区间，映射到另一区间。要解决柱形图宽度的问题，就需要线性比例尺。 将 dataset 中最小的值，映射成 0；将最大的值，映射成 300。 123456var min = d3.min(dataset);var max = d3.max(dataset); var linear = d3.scale.linear() .domain([min, max]) .range([0, 300]); d3.scale.linear() 返回一个线性比例尺。domain() 和 range() 分别设定比例尺的定义域和值域。在这里还用到了两个函数，它们经常与比例尺一起出现： d3.max()d3.min()这两个函数能够求数组的最大值和最小值. 序数比例尺定义域和值域不一定是连续的，如 12var index = [0, 1, 2, 3, 4];var color = [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;, &quot;yellow&quot;, &quot;black&quot;]; 这些值都是离散的，线性比例尺不适合，需要用到序数比例尺。 123var ordinal = d3.scale.ordinal() .domain(index) .range(color); 坐标轴在 SVG 画布的预定义元素里，有六种基本图形： 矩形 圆形 椭圆 线段 折线 多边形 另外，还有一种比较特殊，也是功能最强的元素： 路径 画布中的所有图形，都是由以上七种元素组成。 D3 提供了一个组件：d3.svg.axis()。 1234567891011//数据var dataset = [ 2.5 , 2.1 , 1.7 , 1.3 , 0.9 ];//定义比例尺var linear = d3.scale.linear() .domain([0, d3.max(dataset)]) .range([0, 250]); var axis = d3.svg.axis() .scale(linear) //指定比例尺 .orient(&quot;bottom&quot;) //指定刻度的方向 .ticks(7); //指定刻度的数量 d3.svg.axis()：D3 中坐标轴的组件，能够在 SVG 中生成组成坐标轴的元素。scale()：指定比例尺。orient()：指定刻度的朝向，bottom 表示在坐标轴的下方显示。ticks()：指定刻度的数量。 通常在添加元素的时候就一并设定，写成如下形式： 1234svg.append(&quot;g&quot;) .attr(&quot;class&quot;,&quot;axis&quot;) .attr(&quot;transform&quot;,&quot;translate(20,130)&quot;) .call(axis); 动态图表动态的图表，是指图表在某一时间段会发生某种变化，可能是形状、颜色、位置等，而且用户是可以看到变化的过程的。 D3 提供了 4 个方法用于实现图形的过渡：从状态 A 变为状态 B。 transition()启动过渡效果。 其前后是图形变化前后的状态（形状、位置、颜色等等） duration()指定过渡的持续时间，单位为毫秒。 如 duration(2000) ，指持续 2000 毫秒，即 2 秒。 ease()指定过渡的方式，常用的有： linear：普通的线性变化circle：慢慢地到达变换的最终状态elastic：带有弹跳的到达最终状态bounce：在最终状态处弹跳几次调用时，格式形如： ease(“bounce”)。 delay()指定延迟的时间，表示一定时间后才开始转变，单位同样为毫秒。此函数可以对整体指定延迟，也可以对个别指定延迟。 理解update 、 enter 、 exit当数组的长度与元素数量不一致（数组长度 &gt; 元素数量 or 数组长度 &lt; 元素数量）时,使用此方法可以添加足够的元素或删除多余的元素。 update 和 enter的使用当对应的元素不足时 （ 绑定数据数量 &gt; 对应元素 ），需要添加元素（append）。 update 部分的处理办法一般是：更新属性值enter 部分的处理办法一般是：添加元素后，赋予属性值 Update 和 Exit 的使用 当对应的元素过多时 （ 绑定数据数量 &lt; 对应元素 ），需要删掉多余的元素。 exit 部分的处理办法一般是：删除元素（remove） 交互式操作 什么是交互交互，指的是用户输入了某种指令，程序接受到指令之后必须做出某种响应。对可视化图表来说，交互能使图表更加生动，能表现更多内容。例如，拖动图表中某些图形、鼠标滑到图形上出现提示框、用触屏放大或缩小图形等等。 用户用于交互的工具一般有三种：鼠标、键盘、触屏。 在 D3 中，每一个选择集都有 on() 函数，用于添加事件监听器。 on() 的第一个参数是监听的事件，第二个参数是监听到事件后响应的内容，第二个参数是一个函数。 鼠标常用的事件有： click：鼠标单击某元素时，相当于 mousedown 和 mouseup 组合在一起。mouseover：光标放在某元素上。mouseout：光标从某元素上移出来时。mousemove：鼠标被移动的时候。mousedown：鼠标按钮被按下。mouseup：鼠标按钮被松开。dblclick：鼠标双击。键盘常用的事件有三个： keydown：当用户按下任意键时触发，按住不放会重复触发此事件。该事件不会区分字母的大小写，例如“A”和“a”被视为一致。keypress：当用户按下字符键（大小写字母、数字、加号、等号、回车等）时触发，按住不放会重复触发此事件。该事件区分字母的大小写。keyup：当用户释放键时触发，不区分字母的大小写。触屏常用的事件有三个： touchstart：当触摸点被放在触摸屏上时。touchmove：当触摸点在触摸屏上移动时。touchend：当触摸点从触摸屏上拿开时。当某个事件被监听到时，D3 会把当前的事件存到 d3.event 对象，里面保存了当前事件的各种参数，请大家好好参详。如果需要监听到事件后立刻输出该事件，可以添加一行代码： circle.on(“click”, function(){ console.log(d3.event);}); 监听器函数中都使用了 d3.select(this)，表示选择当前的元素，this 是当前的元素，要改变响应事件的元素时这么写就好。 布局选择 D3：如果希望开发脑海中任意想象到的图表。选择 Highcharts、Echarts 等：如果希望开发几种固定种类的、十分大众化的图表。 布局的作用是：将不适合用于绘图的数据转换成了适合用于绘图的数据。 布局的作用解释成：数据转换。 D3 总共提供了 12 个布局：饼状图（Pie）、力导向图（Force）、弦图（Chord）、树状图（Tree）、集群图（Cluster）、捆图（Bundle）、打包图（Pack）、直方图（Histogram）、分区图（Partition）、堆栈图（Stack）、矩阵树图（Treemap）、层级图（Hierarchy）。 12 个布局中，层级图（Hierarchy）不能直接使用。集群图、打包图、分区图、树状图、矩阵树图是由层级图扩展来的。如此一来，能够使用的布局是 11 个（有 5 个是由层级图扩展而来）。这些布局的作用都是将某种数据转换成另一种数据，而转换后的数据是利于可视化的。 布局不是要直接绘图，而是为了得到绘图所需的数据。 饼状图定义一个布局， var pie = d3.layout.pie(); 返回值赋给变量 pie，此时 pie 可以当做函数使用。 var piedata = pie(dataset);]]></content>
      <categories>
        <category>D3</category>
      </categories>
      <tags>
        <tag>D3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[D3.js简介]]></title>
    <url>%2F2018%2F08%2F09%2FD3-js%E7%AE%80%E4%BB%8B%2F</url>
    <content type="text"><![CDATA[D3.jsD3.js(Data-Driven Documents) 数据驱动文档D3.js 是一个可以基于数据来操作文档的 Javascript 库。可以帮助你使用 HTML, CSS, SVG 以及 Canvas 来展示数据。D3 遵循现有的 Web 标准，可以不需要其他任何框架独立运行在现代浏览器中，它结合强大的可视化组件来驱动 DOM 操作。 特性D3 可以将数据绑定到 DOM 上，然后根据数据来计算对应 DOM 的属性值。 D3 不是一个框架，因此也没有操作上的限制。没有框架的限制带来的好处就是你可以完全按照自己的意愿来表达数据，而不是受限于条条框框，非常灵活。D3 的运行速度很快，支持大数据集和动态交互以及动画。 功能 1、选择集(Selections) 2、动态属性 3、enter和exit操作 4、过渡 D3 不引入新的视觉表示方法，而是借助于现有的 Web 元素: HTML, CSS, SVG 等。D3 可以借助 SVG, Canvas 以及 HTML 将你的数据生动的展现出来。 D3.js的学习方式官方网站： https://d3js.org中文版： https://d3js.org.cnGithub地址：https://github.com/d3/ 学习D3.js: http://d3.decembercafe.org/index.html学习D3.js DEMO入门： https://www.cnblogs.com/fastmover/p/7779660.html 学习D3需要储备的知识12345HTML：超文本标记语言，用于设定网页的内容CSS：层叠样式表，用于设定网页的样式JavaScript：一种直译式脚本语言，用于设定网页的行为DOM：文档对象模型，用于修改文档的内容和结构SVG：可缩放矢量图形，用于绘制可视化的图形 选择集使用 d3.select() 或 d3.selectAll() 选择元素后返回的对象，就是选择集。 选择元素在 D3 中，用于选择元素的函数有两个： d3.select()：是选择所有指定元素的第一个d3.selectAll()：是选择指定元素的全部这两个函数返回的结果称为选择集。 绑定数据D3 中是通过以下两个函数来绑定数据的： datum()：绑定一个数据到选择集上data()：绑定一个数组到选择集上，数组的各项值分别与选择集的各元素绑定相对而言，data() 比较常用。 在上面的代码中，用到了一个无名函数 function(d, i)。当选择集需要使用被绑定的数据时，常需要这么使用。其包含两个参数，其中： d 代表数据，也就是与某元素绑定的数据。i 代表索引，代表数据的索引号，从 0 开始。]]></content>
      <categories>
        <category>D3</category>
      </categories>
      <tags>
        <tag>D3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[博客日志]]></title>
    <url>%2F2018%2F08%2F02%2F%E5%8D%9A%E5%AE%A2%E6%97%A5%E5%BF%97%2F</url>
    <content type="text"><![CDATA[我的第一篇文章哈哈，今天是个高兴的日子，我在Github上部署了自己的博客，以后要把自己之前总结的资料放到Github上了，这里就是我生活学习的家。今天根据hexo-theme-next主题，修改了博客的主题设置，添加了一些内容，希望以后能够坚持每天写博客。]]></content>
      <categories>
        <category>心情随笔</category>
      </categories>
      <tags>
        <tag>心情随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F08%2F02%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
