<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Alan0625</title>
  
  <subtitle>水滴石穿, 聚沙成塔, 每一份坚持都将会有收获！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://alan0625.github.io/"/>
  <updated>2018-08-16T06:01:56.000Z</updated>
  <id>https://alan0625.github.io/</id>
  
  <author>
    <name>Alan0625</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>D3.js基础</title>
    <link href="https://alan0625.github.io/2018/08/16/D3-js%E5%9F%BA%E7%A1%80/"/>
    <id>https://alan0625.github.io/2018/08/16/D3-js基础/</id>
    <published>2018-08-16T06:01:56.000Z</published>
    <updated>2018-08-16T06:01:56.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="D3-js基础用法"><a href="#D3-js基础用法" class="headerlink" title="D3.js基础用法"></a>D3.js基础用法</h2><h3 id="使用-D3-js"><a href="#使用-D3-js" class="headerlink" title="使用 D3.js"></a>使用 D3.js</h3><p>D3.js 是一个 JavaScript 函数库，并不需要通常所说的“安装”。它只有一个文件，在 HTML 中引用即可。有两种方法：</p><p>（1）下载 D3.js 的文件</p><p> d3.zip: <a href="https://github.com/mbostock/d3/releases/download/" target="_blank" rel="noopener">https://github.com/mbostock/d3/releases/download/</a></p><p>解压后，在 HTML 文件中包含相关的 js 文件即可。</p><p>（2）还可以直接包含网络的链接，这种方法较简单：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;http://d3js.org/d3.v3.min.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>但使用的时候要保持网络连接有效，不能再断网的情况下使用。</p><h3 id="开发中需要使用的工具"><a href="#开发中需要使用的工具" class="headerlink" title="开发中需要使用的工具"></a>开发中需要使用的工具</h3><p>记事本软件：Notepad++、Editplus、Sublime Text 等，选择自己喜欢的即可。</p><p>浏览器：IE9 以上、Firefox、Chrome等，推荐用 Chrome</p><p>服务器软件：Apache、Tomcat 等</p><p>其中，服务器软件可能不是必须的，不过 D3 中有些函数需要将 HTML 文件放置于服务器目录下，才能正常使用，关于这点以后会再做说明。</p><h3 id="选择集"><a href="#选择集" class="headerlink" title="选择集"></a>选择集</h3><p>使用 d3.select() 或 d3.selectAll() 选择元素后返回的对象，就是选择集。</p><p>另外，有人会发现，D3 能够连续不断地调用函数，形如：</p><p>d3.select().selectAll().text()。这称为链式语法。</p><h3 id="选择元素"><a href="#选择元素" class="headerlink" title="选择元素"></a>选择元素</h3><p>在 D3 中，用于选择元素的函数有两个：</p><p>d3.select()：是选择所有指定元素的第一个<br>d3.selectAll()：是选择指定元素的全部<br>这两个函数返回的结果称为选择集。</p><h3 id="绑定数据"><a href="#绑定数据" class="headerlink" title="绑定数据"></a>绑定数据</h3><p>D3 中是通过以下两个函数来绑定数据的：</p><p>datum()：绑定一个数据到选择集上<br>data()：绑定一个数组到选择集上，数组的各项值分别与选择集的各元素绑定<br>相对而言，data() 比较常用。</p><p>在上面的代码中，用到了一个无名函数 function(d, i)。当选择集需要使用被绑定的数据时，常需要这么使用。其包含两个参数，其中：</p><p>d 代表数据，也就是与某元素绑定的数据。<br>i 代表索引，代表数据的索引号，从 0 开始。</p><h3 id="选择、插入、删除元素"><a href="#选择、插入、删除元素" class="headerlink" title="选择、插入、删除元素"></a>选择、插入、删除元素</h3><p>选择元素涉及的函数有两个:select 、 selectAll</p><p>关于 select 和 selectAll 的参数，其实是符合 CSS 选择器的条件的，即用“井号（#）”表示 id，用“点（.）”表示 class。</p><p>插入元素涉及的函数有两个：</p><p>append()：在选择集末尾插入元素<br>insert()：在选择集前面插入元素</p><p>删除一个元素时，对于选择的元素，使用 remove 即可.</p><h2 id="绘制一个简单的图表"><a href="#绘制一个简单的图表" class="headerlink" title="绘制一个简单的图表"></a>绘制一个简单的图表</h2><p>HTML 5 提供两种强有力的“画布”：SVG 和 Canvas。</p><h3 id="SVG"><a href="#SVG" class="headerlink" title="SVG"></a>SVG</h3><p>SVG，指可缩放矢量图形（Scalable Vector Graphics），是用于描述二维矢量图形的一种图形格式，是由万维网联盟制定的开放标准。SVG 使用 XML 格式来定义图形，除了 IE8 之前的版本外，绝大部分浏览器都支持 SVG，可将 SVG 文本直接嵌入 HTML 中显示。</p><p>SVG 有如下特点：</p><p>SVG 绘制的是矢量图，因此对图像进行放大不会失真。<br>基于 XML，可以为每个元素添加 JavaScript 事件处理器。<br>每个图形均视为对象，更改对象的属性，图形也会改变。<br>不适合游戏应用。</p><h3 id="Canvas"><a href="#Canvas" class="headerlink" title="Canvas"></a>Canvas</h3><p>Canvas 是通过 JavaScript 来绘制 2D 图形，是 HTML 5 中新增的元素。</p><p>Canvas 有如下特点：</p><p>绘制的是位图，图像放大后会失真。<br>不支持事件处理器。<br>能够以 .png 或 .jpg 格式保存图像<br>适合游戏应用</p><h3 id="绘制矩形"><a href="#绘制矩形" class="headerlink" title="绘制矩形"></a>绘制矩形</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var width = 300;  //画布的宽度</span><br><span class="line">var height = 300;   //画布的高度</span><br><span class="line"> </span><br><span class="line">var svg = d3.select(&quot;body&quot;)     //选择文档中的body元素</span><br><span class="line">    .append(&quot;svg&quot;)          //添加一个svg元素</span><br><span class="line">    .attr(&quot;width&quot;, width)       //设定宽度</span><br><span class="line">    .attr(&quot;height&quot;, height);    //设定高度</span><br></pre></td></tr></table></figure><p>上面的 rect 里没有矩形的属性。矩形的属性，常用的有四个：</p><p>x：矩形左上角的 x 坐标<br>y：矩形左上角的 y 坐标<br>width：矩形的宽度<br>height：矩形的高度<br>要注意，在 SVG 中，x 轴的正方向是水平向右，y 轴的正方向是垂直向下的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">svg.selectAll(&quot;rect&quot;)</span><br><span class="line">    .data(dataset)</span><br><span class="line">    .enter()</span><br><span class="line">    .append(&quot;rect&quot;)</span><br><span class="line">    .attr(&quot;x&quot;,20)</span><br><span class="line">    .attr(&quot;y&quot;,function(d,i)&#123;</span><br><span class="line">         return i * rectHeight;</span><br><span class="line">    &#125;)</span><br><span class="line">    .attr(&quot;width&quot;,function(d)&#123;</span><br><span class="line">         return d;</span><br><span class="line">    &#125;)</span><br><span class="line">    .attr(&quot;height&quot;,rectHeight-2)</span><br><span class="line">    .attr(&quot;fill&quot;,&quot;steelblue&quot;);</span><br></pre></td></tr></table></figure><h2 id="比例尺"><a href="#比例尺" class="headerlink" title="比例尺"></a>比例尺</h2><p>将某一区域的值映射到另一区域，其大小关系不变，这就是比例尺（Scale）。</p><p>D3 中的比例尺，也有定义域和值域，分别被称为 domain 和 range。开发者需要指定 domain 和 range 的范围，如此即可得到一个计算关系。</p><h3 id="线性比例尺"><a href="#线性比例尺" class="headerlink" title="线性比例尺"></a>线性比例尺</h3><p>线性比例尺，能将一个连续的区间，映射到另一区间。要解决柱形图宽度的问题，就需要线性比例尺。</p><p>将 dataset 中最小的值，映射成 0；将最大的值，映射成 300。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var min = d3.min(dataset);</span><br><span class="line">var max = d3.max(dataset);</span><br><span class="line"> </span><br><span class="line">var linear = d3.scale.linear()</span><br><span class="line">        .domain([min, max])</span><br><span class="line">        .range([0, 300]);</span><br></pre></td></tr></table></figure><p>d3.scale.linear() 返回一个线性比例尺。domain() 和 range() 分别设定比例尺的定义域和值域。在这里还用到了两个函数，它们经常与比例尺一起出现：</p><p>d3.max()<br>d3.min()<br>这两个函数能够求数组的最大值和最小值.</p><h3 id="序数比例尺"><a href="#序数比例尺" class="headerlink" title="序数比例尺"></a>序数比例尺</h3><p>定义域和值域不一定是连续的，如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var index = [0, 1, 2, 3, 4];</span><br><span class="line">var color = [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;, &quot;yellow&quot;, &quot;black&quot;];</span><br></pre></td></tr></table></figure><p>这些值都是离散的，线性比例尺不适合，需要用到序数比例尺。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var ordinal = d3.scale.ordinal()</span><br><span class="line">        .domain(index)</span><br><span class="line">        .range(color);</span><br></pre></td></tr></table></figure><h3 id="坐标轴"><a href="#坐标轴" class="headerlink" title="坐标轴"></a>坐标轴</h3><p>在 SVG 画布的预定义元素里，有六种基本图形：</p><p>矩形 <rect></rect><br>圆形 <circle></circle><br>椭圆 <ellipse></ellipse><br>线段 <line></line><br>折线 <polyline></polyline><br>多边形 <polygon></polygon><br>另外，还有一种比较特殊，也是功能最强的元素：</p><p>路径 <path></path><br>画布中的所有图形，都是由以上七种元素组成。</p><p>D3 提供了一个组件：d3.svg.axis()。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//数据</span><br><span class="line">var dataset = [ 2.5 , 2.1 , 1.7 , 1.3 , 0.9 ];</span><br><span class="line">//定义比例尺</span><br><span class="line">var linear = d3.scale.linear()</span><br><span class="line">      .domain([0, d3.max(dataset)])</span><br><span class="line">      .range([0, 250]);</span><br><span class="line"> </span><br><span class="line">var axis = d3.svg.axis()</span><br><span class="line">     .scale(linear)      //指定比例尺</span><br><span class="line">     .orient(&quot;bottom&quot;)   //指定刻度的方向</span><br><span class="line">     .ticks(7);          //指定刻度的数量</span><br></pre></td></tr></table></figure><p>d3.svg.axis()：D3 中坐标轴的组件，能够在 SVG 中生成组成坐标轴的元素。<br>scale()：指定比例尺。<br>orient()：指定刻度的朝向，bottom 表示在坐标轴的下方显示。<br>ticks()：指定刻度的数量。</p><p>通常在添加元素的时候就一并设定，写成如下形式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">svg.append(&quot;g&quot;)</span><br><span class="line">  .attr(&quot;class&quot;,&quot;axis&quot;)</span><br><span class="line">  .attr(&quot;transform&quot;,&quot;translate(20,130)&quot;)</span><br><span class="line">  .call(axis);</span><br></pre></td></tr></table></figure><h3 id="动态图表"><a href="#动态图表" class="headerlink" title="动态图表"></a>动态图表</h3><p>动态的图表，是指图表在某一时间段会发生某种变化，可能是形状、颜色、位置等，而且用户是可以看到变化的过程的。</p><p>D3 提供了 4 个方法用于实现图形的过渡：从状态 A 变为状态 B。</p><p>transition()<br>启动过渡效果。</p><p>其前后是图形变化前后的状态（形状、位置、颜色等等）</p><p>duration()<br>指定过渡的持续时间，单位为毫秒。</p><p>如 duration(2000) ，指持续 2000 毫秒，即 2 秒。</p><p>ease()<br>指定过渡的方式，常用的有：</p><p>linear：普通的线性变化<br>circle：慢慢地到达变换的最终状态<br>elastic：带有弹跳的到达最终状态<br>bounce：在最终状态处弹跳几次<br>调用时，格式形如： ease(“bounce”)。</p><p>delay()<br>指定延迟的时间，表示一定时间后才开始转变，单位同样为毫秒。此函数可以对整体指定延迟，也可以对个别指定延迟。</p><h3 id="理解update-、-enter-、-exit"><a href="#理解update-、-enter-、-exit" class="headerlink" title="理解update 、 enter 、 exit"></a>理解update 、 enter 、 exit</h3><p>当数组的长度与元素数量不一致（数组长度 &gt; 元素数量 or 数组长度 &lt; 元素数量）时,使用此方法可以添加足够的元素或删除多余的元素。</p><p>update 和 enter的使用<br>当对应的元素不足时 （ 绑定数据数量 &gt; 对应元素 ），需要添加元素（append）。</p><p>update 部分的处理办法一般是：更新属性值<br>enter 部分的处理办法一般是：添加元素后，赋予属性值</p><p>Update 和 Exit 的使用</p><p>当对应的元素过多时 （ 绑定数据数量 &lt; 对应元素 ），需要删掉多余的元素。</p><p>exit 部分的处理办法一般是：删除元素（remove）</p><h3 id="交互式操作"><a href="#交互式操作" class="headerlink" title="交互式操作"></a>交互式操作</h3><ol><li>什么是交互<br>交互，指的是用户输入了某种指令，程序接受到指令之后必须做出某种响应。对可视化图表来说，交互能使图表更加生动，能表现更多内容。例如，拖动图表中某些图形、鼠标滑到图形上出现提示框、用触屏放大或缩小图形等等。</li></ol><p>用户用于交互的工具一般有三种：鼠标、键盘、触屏。</p><p>在 D3 中，每一个选择集都有 on() 函数，用于添加事件监听器。</p><p>on() 的第一个参数是监听的事件，第二个参数是监听到事件后响应的内容，第二个参数是一个函数。</p><p>鼠标常用的事件有：</p><p>click：鼠标单击某元素时，相当于 mousedown 和 mouseup 组合在一起。<br>mouseover：光标放在某元素上。<br>mouseout：光标从某元素上移出来时。<br>mousemove：鼠标被移动的时候。<br>mousedown：鼠标按钮被按下。<br>mouseup：鼠标按钮被松开。<br>dblclick：鼠标双击。<br>键盘常用的事件有三个：</p><p>keydown：当用户按下任意键时触发，按住不放会重复触发此事件。该事件不会区分字母的大小写，例如“A”和“a”被视为一致。<br>keypress：当用户按下字符键（大小写字母、数字、加号、等号、回车等）时触发，按住不放会重复触发此事件。该事件区分字母的大小写。<br>keyup：当用户释放键时触发，不区分字母的大小写。<br>触屏常用的事件有三个：</p><p>touchstart：当触摸点被放在触摸屏上时。<br>touchmove：当触摸点在触摸屏上移动时。<br>touchend：当触摸点从触摸屏上拿开时。<br>当某个事件被监听到时，D3 会把当前的事件存到 d3.event 对象，里面保存了当前事件的各种参数，请大家好好参详。如果需要监听到事件后立刻输出该事件，可以添加一行代码：</p><p>circle.on(“click”, function(){<br>    console.log(d3.event);<br>});</p><p>监听器函数中都使用了 d3.select(this)，表示选择当前的元素，this 是当前的元素，要改变响应事件的元素时这么写就好。</p><h3 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h3><p>选择 D3：如果希望开发脑海中任意想象到的图表。<br>选择 Highcharts、Echarts 等：如果希望开发几种固定种类的、十分大众化的图表。</p><p>布局的作用是：将不适合用于绘图的数据转换成了适合用于绘图的数据。</p><p>布局的作用解释成：数据转换。</p><p>D3 总共提供了 12 个布局：饼状图（Pie）、力导向图（Force）、弦图（Chord）、树状图（Tree）、集群图（Cluster）、捆图（Bundle）、打包图（Pack）、直方图（Histogram）、分区图（Partition）、堆栈图（Stack）、矩阵树图（Treemap）、层级图（Hierarchy）。</p><p>12 个布局中，层级图（Hierarchy）不能直接使用。集群图、打包图、分区图、树状图、矩阵树图是由层级图扩展来的。如此一来，能够使用的布局是 11 个（有 5 个是由层级图扩展而来）。这些布局的作用都是将某种数据转换成另一种数据，而转换后的数据是利于可视化的。</p><p>布局不是要直接绘图，而是为了得到绘图所需的数据。</p><h3 id="饼状图"><a href="#饼状图" class="headerlink" title="饼状图"></a>饼状图</h3><p>定义一个布局，</p><p>var pie = d3.layout.pie();</p><p>返回值赋给变量 pie，此时 pie 可以当做函数使用。</p><p>var piedata = pie(dataset);</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;D3-js基础用法&quot;&gt;&lt;a href=&quot;#D3-js基础用法&quot; class=&quot;headerlink&quot; title=&quot;D3.js基础用法&quot;&gt;&lt;/a&gt;D3.js基础用法&lt;/h2&gt;&lt;h3 id=&quot;使用-D3-js&quot;&gt;&lt;a href=&quot;#使用-D3-js&quot; class=&quot;
      
    
    </summary>
    
      <category term="D3" scheme="https://alan0625.github.io/categories/D3/"/>
    
    
      <category term="D3" scheme="https://alan0625.github.io/tags/D3/"/>
    
  </entry>
  
  <entry>
    <title>D3.js简介</title>
    <link href="https://alan0625.github.io/2018/08/09/D3-js%E7%AE%80%E4%BB%8B/"/>
    <id>https://alan0625.github.io/2018/08/09/D3-js简介/</id>
    <published>2018-08-09T09:32:33.000Z</published>
    <updated>2018-08-09T09:32:33.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="D3-js"><a href="#D3-js" class="headerlink" title="D3.js"></a>D3.js</h2><h3 id="D3-js-Data-Driven-Documents-数据驱动文档"><a href="#D3-js-Data-Driven-Documents-数据驱动文档" class="headerlink" title="D3.js(Data-Driven Documents) 数据驱动文档"></a>D3.js(Data-Driven Documents) 数据驱动文档</h3><p>D3.js 是一个可以基于数据来操作文档的 Javascript 库。可以帮助你使用 HTML, CSS, SVG 以及 Canvas 来展示数据。D3 遵循现有的 Web 标准，可以不需要其他任何框架独立运行在现代浏览器中，它结合强大的可视化组件来驱动 DOM 操作。</p><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><p>D3 可以将数据绑定到 DOM 上，然后根据数据来计算对应 DOM 的属性值。</p><p>D3 不是一个框架，因此也没有操作上的限制。没有框架的限制带来的好处就是你可以完全按照自己的意愿来表达数据，而不是受限于条条框框，非常灵活。D3 的运行速度很快，支持大数据集和动态交互以及动画。</p><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><p>  1、选择集(Selections)<br>  2、动态属性<br>  3、enter和exit操作<br>  4、过渡</p><p>D3 不引入新的视觉表示方法，而是借助于现有的 Web 元素: HTML, CSS, SVG 等。D3 可以借助 SVG, Canvas 以及 HTML 将你的数据生动的展现出来。</p><h3 id="D3-js的学习方式"><a href="#D3-js的学习方式" class="headerlink" title="D3.js的学习方式"></a>D3.js的学习方式</h3><p>官方网站： <a href="https://d3js.org" target="_blank" rel="noopener">https://d3js.org</a><br>中文版： <a href="https://d3js.org.cn" target="_blank" rel="noopener">https://d3js.org.cn</a><br>Github地址：<a href="https://github.com/d3/" target="_blank" rel="noopener">https://github.com/d3/</a></p><p>学习D3.js: <a href="http://d3.decembercafe.org/index.html" target="_blank" rel="noopener">http://d3.decembercafe.org/index.html</a><br>学习D3.js DEMO入门： <a href="https://www.cnblogs.com/fastmover/p/7779660.html" target="_blank" rel="noopener">https://www.cnblogs.com/fastmover/p/7779660.html</a></p><h3 id="学习D3需要储备的知识"><a href="#学习D3需要储备的知识" class="headerlink" title="学习D3需要储备的知识"></a>学习D3需要储备的知识</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HTML：超文本标记语言，用于设定网页的内容</span><br><span class="line">CSS：层叠样式表，用于设定网页的样式</span><br><span class="line">JavaScript：一种直译式脚本语言，用于设定网页的行为</span><br><span class="line">DOM：文档对象模型，用于修改文档的内容和结构</span><br><span class="line">SVG：可缩放矢量图形，用于绘制可视化的图形</span><br></pre></td></tr></table></figure><h3 id="选择集"><a href="#选择集" class="headerlink" title="选择集"></a>选择集</h3><p>使用 d3.select() 或 d3.selectAll() 选择元素后返回的对象，就是选择集。</p><h4 id="选择元素"><a href="#选择元素" class="headerlink" title="选择元素"></a>选择元素</h4><p>在 D3 中，用于选择元素的函数有两个：</p><p>d3.select()：是选择所有指定元素的第一个<br>d3.selectAll()：是选择指定元素的全部<br>这两个函数返回的结果称为选择集。</p><h4 id="绑定数据"><a href="#绑定数据" class="headerlink" title="绑定数据"></a>绑定数据</h4><p>D3 中是通过以下两个函数来绑定数据的：</p><p>datum()：绑定一个数据到选择集上<br>data()：绑定一个数组到选择集上，数组的各项值分别与选择集的各元素绑定<br>相对而言，data() 比较常用。</p><p>在上面的代码中，用到了一个无名函数 function(d, i)。当选择集需要使用被绑定的数据时，常需要这么使用。其包含两个参数，其中：</p><p>d 代表数据，也就是与某元素绑定的数据。<br>i 代表索引，代表数据的索引号，从 0 开始。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;D3-js&quot;&gt;&lt;a href=&quot;#D3-js&quot; class=&quot;headerlink&quot; title=&quot;D3.js&quot;&gt;&lt;/a&gt;D3.js&lt;/h2&gt;&lt;h3 id=&quot;D3-js-Data-Driven-Documents-数据驱动文档&quot;&gt;&lt;a href=&quot;#D3-js-D
      
    
    </summary>
    
      <category term="D3" scheme="https://alan0625.github.io/categories/D3/"/>
    
    
      <category term="D3" scheme="https://alan0625.github.io/tags/D3/"/>
    
  </entry>
  
  <entry>
    <title>博客日志</title>
    <link href="https://alan0625.github.io/2018/08/02/%E5%8D%9A%E5%AE%A2%E6%97%A5%E5%BF%97/"/>
    <id>https://alan0625.github.io/2018/08/02/博客日志/</id>
    <published>2018-08-02T14:23:12.000Z</published>
    <updated>2018-08-06T12:23:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="我的第一篇文章"><a href="#我的第一篇文章" class="headerlink" title="我的第一篇文章"></a>我的第一篇文章</h2><h5 id="哈哈，今天是个高兴的日子，我在Github上部署了自己的博客，以后要把自己之前总结的资料放到Github上了，这里就是我生活学习的家。"><a href="#哈哈，今天是个高兴的日子，我在Github上部署了自己的博客，以后要把自己之前总结的资料放到Github上了，这里就是我生活学习的家。" class="headerlink" title="哈哈，今天是个高兴的日子，我在Github上部署了自己的博客，以后要把自己之前总结的资料放到Github上了，这里就是我生活学习的家。"></a>哈哈，今天是个高兴的日子，我在Github上部署了自己的博客，以后要把自己之前总结的资料放到Github上了，这里就是我生活学习的家。</h5><h5 id="今天根据hexo-theme-next主题，修改了博客的主题设置，添加了一些内容，希望以后能够坚持每天写博客。"><a href="#今天根据hexo-theme-next主题，修改了博客的主题设置，添加了一些内容，希望以后能够坚持每天写博客。" class="headerlink" title="今天根据hexo-theme-next主题，修改了博客的主题设置，添加了一些内容，希望以后能够坚持每天写博客。"></a>今天根据hexo-theme-next主题，修改了博客的主题设置，添加了一些内容，希望以后能够坚持每天写博客。</h5>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;我的第一篇文章&quot;&gt;&lt;a href=&quot;#我的第一篇文章&quot; class=&quot;headerlink&quot; title=&quot;我的第一篇文章&quot;&gt;&lt;/a&gt;我的第一篇文章&lt;/h2&gt;&lt;h5 id=&quot;哈哈，今天是个高兴的日子，我在Github上部署了自己的博客，以后要把自己之前总结的资料放
      
    
    </summary>
    
      <category term="心情随笔" scheme="https://alan0625.github.io/categories/%E5%BF%83%E6%83%85%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="心情随笔" scheme="https://alan0625.github.io/tags/%E5%BF%83%E6%83%85%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://alan0625.github.io/2018/08/02/hello-world/"/>
    <id>https://alan0625.github.io/2018/08/02/hello-world/</id>
    <published>2018-08-02T12:44:48.356Z</published>
    <updated>2019-06-09T11:06:14.630Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
